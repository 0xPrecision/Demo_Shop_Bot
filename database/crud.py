from typing import Optional, List, Tuple, Any
from decimal import Decimal
from database.models import User, Product, Category, Cart, Order, OrderItem

# -------- USERS --------

async def get_or_create_user_profile(user_id: int) -> Optional[User]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.
    –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    :param user_id: Telegram user ID.
    :return: –û–±—ä–µ–∫—Ç User –∏–ª–∏ None.
    """
    user = await User.get_or_none(id=user_id)
    if not user:
        user = await User.create(id=user_id, full_name="", phone="", address="")
    return user

async def update_user_profile(user_id: int, name: str = None, phone: str = None, address: str = None) -> User | None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: Telegram user ID.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω.
    :param address: –ê–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :return: –û–±—ä–µ–∫—Ç User.
    """
    user = await User.get_or_none(id=user_id)
    if not user:
        return None
    if name is not None:
        user.full_name = name
    if phone is not None:
        user.phone = phone
    if address is not None:
        user.address = address
    await user.save()
    return user

async def create_user_profile(user_id: int, name: str, phone: str, address: str) -> User:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: Telegram user ID.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param phone: –¢–µ–ª–µ—Ñ–æ–Ω.
    :param address: –ê–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    :return: –û–±—ä–µ–∫—Ç User.
    """
    user = await User.get_or_none(id=user_id)
    if user is None:
        return await User.create(id=user_id, full_name=name, phone=phone, address=address)
    else:
        user.full_name = name
        user.phone = phone
        user.address = address
        await user.save()
    return user

# -------- CATEGORIES --------

async def create_category(name: str) -> Category:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :return: –û–±—ä–µ–∫—Ç Category.
    """
    category, _ = await Category.get_or_create(name=name)
    return category

async def get_all_categories() -> List[Category]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Category.
    """
    return await Category.all()

async def update_category(cat_id: int, new_name: str):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    return await Category.filter(id=cat_id).update(name=new_name)

async def get_category_by_name(name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é.
    """
    return await Category.get(name=name)

# -------- PRODUCTS --------

async def create_product(
    name: str,
    description: str,
    price: Decimal,
    stock: int,
    category: Category,
    photo: str = None,
    is_active: bool = True
) -> Product:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    :param price: –¶–µ–Ω–∞.
    :param stock: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.
    :param category: –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param photo: File ID —Ñ–æ—Ç–æ.
    :param is_active: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä.
    :return: –û–±—ä–µ–∫—Ç Product.
    """
    return await Product.create(
        name=name,
        description=description,
        price=price,
        stock=stock,
        category=category,
        photo=photo,
        is_active=is_active
    )

async def update_product(product_id: int, **fields: Any):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –ø–æ product_id.
    :param product_id: ID —Ç–æ–≤–∞—Ä–∞.
    :param fields: –ö–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –≥–¥–µ –∫–ª—é—á ‚Äî –ø–æ–ª–µ –º–æ–¥–µ–ª–∏ Product, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (int)
    """
    # –ï—Å–ª–∏ –≤ fields –µ—Å—Ç—å category –∫–∞–∫ –æ–±—ä–µ–∫—Ç ‚Äî –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º id:
    if "category" in fields and fields["category"]:
        category = fields["category"]
        if hasattr(category, "id"):
            fields["category_id"] = category.id
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å—Ç—Ä–æ–∫–æ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ), –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–∞–Ω–µ–µ!
            raise ValueError("category –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Category")
        del fields["category"]

    updated_count = await Product.filter(id=product_id).update(**fields)
    return updated_count

async def get_all_products() -> List[Product]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Product.
    """
    return await Product.filter(is_active=True).prefetch_related("category").all()

async def get_products_by_category(category: Category) -> List[Product]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param category: –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Product.
    """
    return await Product.filter(category=category, is_active=True).all()

async def get_products_page_by_category(category_id: int, page: int = 1, page_size: int = 10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param category_id: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ (–æ—Ç 1)
    :param page_size: –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, has_next, has_prev)
    """
    total = await Product.filter(category_id=category_id, is_active=True).count()
    total_pages = (total + page_size - 1) // page_size
    skip = (page - 1) * page_size
    products = await Product.filter(category_id=category_id, is_active=True).order_by('-id').offset(skip).limit(page_size)
    has_prev = page > 1
    has_next = page < total_pages
    return products, has_next, has_prev

async def get_product_by_id(product_id: int) -> Optional[Product]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ id.
    :param product_id: ID —Ç–æ–≤–∞—Ä–∞.
    :return: –û–±—ä–µ–∫—Ç Product –∏–ª–∏ None.
    """
    return await Product.get_or_none(id=product_id)


async def get_products_page(page: int = 1, page_size: int = 10) -> Tuple[List[Product], bool, bool]:
    total = await Product.filter(is_active=True).all().count()
    total_pages = (total + page_size - 1) // page_size
    skip = (page - 1) * page_size
    products = await Product.filter(is_active=True).order_by('-id').offset(skip).limit(page_size)
    has_prev = page > 1
    has_next = page < total_pages
    return products, has_next, has_prev


# -------- CART --------

async def add_to_cart(user_id: int, product_id: int, quantity: int) -> Cart:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param product_id: ID —Ç–æ–≤–∞—Ä–∞.
    :param quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    :return: –û–±—ä–µ–∫—Ç Cart (–ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ä–∑–∏–Ω–µ).
    """
    user = await get_or_create_user_profile(user_id)
    product = await Product.get(id=product_id)
    cart_item = await Cart.get_or_none(user=user, product=product)
    if cart_item:
        cart_item.quantity += quantity
        await cart_item.save()
    else:
        cart_item = await Cart.create(user=user, product=product, quantity=quantity)
    return cart_item

async def get_cart(user_id: int) -> List[Cart]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π Cart).
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°–ø–∏—Å–æ–∫ Cart.
    """
    user = await get_or_create_user_profile(user_id)
    return await Cart.filter(user=user).prefetch_related("product").all()

async def remove_from_cart(user_id: int, product_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param product_id: ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    :return: None
    """
    user = await get_or_create_user_profile(user_id)
    await Cart.filter(user=user, product=product_id).delete()

async def clear_cart(user_id: int) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    user = await get_or_create_user_profile(user_id)
    await Cart.filter(user=user).delete()

# -------- ORDERS --------

async def create_order(
    user_id: int,
    name: str = "-",
    phone: str = "-",
    status: str = "üîß –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
    payment_method: str = "-",
    delivery_method: str = "-",
    address: str = "-",
    comment: str = "-",
) -> Optional[Order]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param name: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    :param payment_method: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
    :param delivery_method: –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏.
    :param address: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
    :param comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    :return: –û–±—ä–µ–∫—Ç Order –∏–ª–∏ None, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.
    """
    user = await get_or_create_user_profile(user_id)
    cart_items = await Cart.filter(user=user).prefetch_related('product')
    if not cart_items:
        return None
    order = await Order.create(
        user=user,
        name=name,
        phone=phone,
        status=status,
        total_price=0,
        payment_method=payment_method,
        delivery_method=delivery_method,
        address=address,
        comment=comment
    )
    total = 0
    for item in cart_items:
        await OrderItem.create(
            order=order,
            product=item.product,
            quantity=item.quantity,
            price_at_order=item.product.price
        )
        total += Decimal(item.product.price) * item.quantity
    order.total_price = total
    await order.save()
    await clear_cart(user_id)
    return order

async def get_orders(user_id: int = None) -> List[Order]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (Order).
    """
    if user_id:
        return await Order.filter(user_id=user_id)
    else:
        return await Order.all().order_by('-created_at')

async def get_order_items(order: Order) -> List[OrderItem]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    :param order: –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞.
    :return: –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞ (OrderItem).
    """
    return await OrderItem.filter(order=order).prefetch_related('product').all()

async def get_order_by_id(order_id: int) -> Optional[Order]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ –µ–≥–æ id.
    :param order_id: ID –∑–∞–∫–∞–∑–∞.
    :return: –û–±—ä–µ–∫—Ç Order –∏–ª–∏ None.
    """
    order = await Order.get_or_none(id=order_id)
    if order:
        await order.fetch_related('user')
    return order

async def get_orders_page(page: int = 1, page_size: int = 10) -> Tuple[List[Order], bool, bool]:
    total = await Order.all().count()
    total_pages = (total + page_size - 1) // page_size
    skip = (page - 1) * page_size
    orders = await Order.all().order_by('-created_at').offset(skip).limit(page_size)
    has_prev = page > 1
    has_next = page < total_pages
    return orders, has_next, has_prev