from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from bot.keyboards.admin.order_keyboards import status_keyboard
from database.models import Order
from ...constants import ORDER_STATUSES
from ...utils.admin_utils.order_utils import show_orders, admin_show_order_summary
from database.crud import get_order_by_id
from .admin_access import admin_only


router = Router()


@router.callback_query(F.data == "admin_orders")
@admin_only
async def admin_orders_list(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    """
    page = 1
    text = "üì¶ <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b> (–≤—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞):"
    await show_orders(callback, page, text)
    await callback.answer()


@router.callback_query(F.data.startswith("admin_orders_page:"))
@admin_only
async def admin_orders_page(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    """
    page = int(callback.data.split(":")[1])
    text = f"üì¶ <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b> (—Å—Ç—Ä. {page}):"
    await show_orders(callback, page, text)
    await callback.answer()


@router.callback_query(F.data.startswith("admin_order_detail:"))
@admin_only
async def admin_order_detail(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await admin_show_order_summary(callback, state, order, order_id)
    await callback.answer()


@router.callback_query(F.data == "change_status")
@admin_only
async def change_order_status_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–∞.
    :param callback: CallbackQuery –æ—Ç –∞–¥–º–∏–Ω–∞.
    """
    message = callback.message
    # –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    order_id = int(message.text.split("#")[1].split()[0])
    order = await get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await message.edit_reply_markup(reply_markup=status_keyboard(order.id, order.status))
    await callback.answer()


@router.callback_query(F.data.startswith("admin_order_set_status:"))
@admin_only
async def set_order_status(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.
    """
    _, order_id, new_status = callback.data.split(":")
    order_id = int(order_id)
    order = await Order.get_or_none(id=order_id).prefetch_related("user")
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await order.update_from_dict({"status": new_status}).save()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Telegram
    status_label = dict(ORDER_STATUSES)[new_status]
    try:
        text = (
            "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status_label}</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )
        await callback.bot.send_message(
            chat_id=order.user.id,
            text=text,
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        print(f"[OrderNotify] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
    await admin_show_order_summary(callback, state, order, order_id)
    await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω, –∫–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")


