from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from bot.keyboards.admin.catalog_keyboards import product_admin_keyboard, admin_catalog_menu_keyboard, show_products_or_edit_category
from database.models import Category
from ...utils.admin_utils.catalog_utils import get_products_info, filter_or_change_pr_category
from database.crud import get_products_page, get_product_by_id, get_products_page_by_category
from .admin_access import admin_only
from ...utils.common_utils import format_price, delete_request_and_user_message

router = Router()


@router.callback_query(F.data == "admin_catalog")
@admin_only
async def admin_catalog_menu(callback: CallbackQuery):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞: –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=admin_catalog_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_products")
@admin_only
async def admin_products_list(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤.
    """
    await delete_request_and_user_message(callback.message, state)
    page = 1
    text = "üõí <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):"
    func = get_products_page(page)
    await get_products_info(callback, page, text, func, state)
    await callback.answer()


@router.callback_query(F.data == "admin_categories")
@admin_only
async def admin_categories_entry(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (—Ñ–∏–ª—å—Ç—Ä).
    """
    text = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):"
    await filter_or_change_pr_category(callback, state, text)
    await callback.answer()


@router.callback_query(F.data.startswith("admin_products_page:"))
@admin_only
async def admin_products_page(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    page = int(callback.data.split(":")[1])
    text = f"üõí <b>–¢–æ–≤–∞—Ä—ã</b> (—Å—Ç—Ä. {page}):"
    func = get_products_page(page)
    await get_products_info(callback, page, text, func, state)
    await callback.answer()


@router.callback_query(F.data.startswith("admin_product_detail:"))
@admin_only
async def admin_product_detail(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    product_id = int(callback.data.split(":")[1])
    product = await get_product_by_id(product_id)
    await product.fetch_related("category")

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = (f"<b>–¢–æ–≤–∞—Ä:</b>\n"
            f"<b>{product.name}</b>\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {product.stock}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name if product.category else '‚Äî'}\n"
            f"–¶–µ–Ω–∞: {format_price(product.price)}‚ÇΩ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '‚Äî'}")


    if product.photo:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        msg = await callback.message.answer_photo(
            photo=product.photo,
            caption=text,
            reply_markup=product_admin_keyboard(product_id),
        )
        await callback.message.delete()
        await state.update_data(main_message_id=msg.message_id)
    else:
        msg = await callback.message.edit_text(
            text=text,
            reply_markup=product_admin_keyboard(product_id)
        )
        await state.update_data(main_message_id=msg.message_id)
    await callback.answer()



@router.callback_query(F.data.startswith("admin_select_category:"))
@admin_only
async def admin_products_by_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split(":", 1)[1])
    await callback.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                     reply_markup=show_products_or_edit_category(category_id))



@router.callback_query(F.data.startswith("admin_category_filter:"))
@admin_only
async def admin_products_by_category(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    category_id = int(callback.data.split(":", 1)[1])
    page = 1
    category = await Category.get(id=category_id)
    text = f"üõí <b>–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name}</b>"
    func = get_products_page_by_category(category_id, page)
    await get_products_info(callback, page, text, func, state)
    await callback.answer()


