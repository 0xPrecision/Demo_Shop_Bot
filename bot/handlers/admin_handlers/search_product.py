from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from .admin_access import admin_only
from database.models import Product
from ...keyboards.admin.catalog_keyboards import product_admin_keyboard, show_products_for_search, \
    back_to_search_keyboard
from ...states.admin_states.product_states import ProductSearchStates
from ...utils.common_utils import format_price, delete_request_and_user_message

router = Router()


@router.callback_query(F.data == "admin_search_product")
@admin_only
async def start_search_product(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    msg = await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.update_data(main_message_id=msg.message_id)
    await state.set_state(ProductSearchStates.waiting_query)
    await callback.answer()


@router.message(ProductSearchStates.waiting_query)
@admin_only
async def search_product_query(message: Message, state: FSMContext):
    """
    –ò—â–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∏–ª–∏ ID.
    """
    await delete_request_and_user_message(message, state)
    query = message.text.strip()
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
    if query.isdigit():
        products = await Product.filter(id=int(query)).all()
    else:
        products = await Product.filter(name__icontains=query).all()
    if not products:
        msg = await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                             reply_markup=back_to_search_keyboard())
        await state.update_data(main_message_id=msg.message_id)
        await state.clear()
        return
    # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    if len(products) == 1:
        product = products[0]
        await product.fetch_related("category")

        text = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product.name}</b>\n"
            f"–¶–µ–Ω–∞: {format_price(product.price)} ‚ÇΩ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '‚Äî'}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {product.stock}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name if product.category else '-'}"
        )
        if product.photo:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=product.photo,
                caption=text,
                reply_markup=product_admin_keyboard(product.id)
            )
        else:
            msg = await message.answer(text, reply_markup=product_admin_keyboard(product.id))
            await state.update_data(main_message_id=msg.message_id)
        await state.clear()
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏

        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                             reply_markup=show_products_for_search(products))
        await state.clear()
