from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram import Router, F
from database.crud import get_all_products
from database.models import Product
from bot.utils.common_utils import paginate, format_price, delete_request_and_user_message
from bot.keyboards.user.user_main_menu import main_menu
from bot.keyboards.user.user_catalog_keyboards import show_product_info_kb, products_keyboard, show_categories_keyboard

router = Router()
PAGE_SIZE = 5


async def show_categories(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
    """
    products = await get_all_products()
    categories = sorted({p.category.name for p in products if p.category is not None})
    if not categories:
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu())
        return
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=show_categories_keyboard(categories)
    )

@router.callback_query(F.data.startswith("category_"))
async def show_products_in_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    await delete_request_and_user_message(callback.message, state)
    data = callback.data.split("_", 2)
    category_name = data[1]
    page = int(data[2]) if len(data) > 2 else 0
    all_products = await get_all_products()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_products = [p for p in all_products if (p.category and p.category.name == category_name)]
    if not category_products:
        await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_menu())
        await callback.answer()
        return

    page_products, total_pages, current_page = paginate(category_products, page, PAGE_SIZE)
    text = f"<b>üõç–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_name}¬ª</b>\n"
    text += "-" * 42
    text += "\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–≤–∞—Ä–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ."

    markup = products_keyboard(page_products, category_name, current_page, total_pages)

    msg = await callback.message.answer(
        text,
        reply_markup=markup
    )
    await state.update_data(main_message_id=msg.message_id)
    await callback.answer()


@router.callback_query(F.data.startswith("product_"))
async def show_product_info(callback: CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ,
    —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ (catalog/cart) –ø–æ callback_data.
    """
    try:
        parts = callback.data.split("_")
        product_id = int(parts[1])
        source = parts[2]
        category_name = parts[3] if len(parts) > 3 else None
        page = parts[4] if len(parts) > 4 else 0
    except (IndexError, ValueError):
            await callback.answer("–û—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.", show_alert=True)
            return

    product = await Product.get_or_none(id=product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if product.photo:
        await callback.message.delete()
        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=product.photo,
            caption=(
                f"<b>{product.name}</b>\n"
                f"–¶–µ–Ω–∞: {format_price(product.price)} ‚ÇΩ\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'}"
            ),
            reply_markup=show_product_info_kb(product.id, source, category_name, page),
        )
    else:
        await callback.message.edit_text(
            text=(
                f"<b>{product.name}</b>\n"
                f"–¶–µ–Ω–∞: {format_price(product.price)} ‚ÇΩ\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'}"
            ),
            reply_markup=show_product_info_kb(product.id, source, category_name, page)
        )
    await callback.answer()


