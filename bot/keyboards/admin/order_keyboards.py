from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Tuple

from bot.constants import ORDER_STATUSES


def orders_list_keyboard(orders: List[Tuple[int, str]], page: int = 1, has_next: bool = False, has_prev: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    :param orders: —Å–ø–∏—Å–æ–∫ (order_id, short_info)
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param has_next: –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param has_prev: –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :return: InlineKeyboardMarkup
    """
    buttons = [
        [InlineKeyboardButton(text=f"#_id {order_id} | {short_info}", callback_data=f"admin_order_detail:{order_id}")]
        for order_id, short_info in orders
    ]
    nav = []
    if has_prev:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_orders_page:{page-1}"))
    if has_next:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_orders_page:{page+1}"))
    if nav:
        buttons.append(nav)
    buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞", callback_data="admin_search_order")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start_admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def show_orders_for_search(orders) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.

    :param orders: list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (Order), –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã id, user.full_name, total_price.
    :return: InlineKeyboardMarkup ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"id#{o.id} | {o.user.full_name} | {o.total_price}‚ÇΩ",
                callback_data=f"admin_order_detail:{o.id}"
            )] for o in orders
        ]
    )


def change_order_status():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
    return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ö°Ô∏è –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="change_status")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="/start_admin")]
            ]
        )


def status_keyboard(order_id: int, current_status: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    :param order_id: ID –∑–∞–∫–∞–∑–∞.
    :param current_status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
    :return: InlineKeyboardMarkup
    """
    buttons = []
    for status_code, status_label in ORDER_STATUSES:
        if status_code == current_status:
            continue
        buttons.append(
            [InlineKeyboardButton(
                text=status_label,
                callback_data=f"admin_order_set_status:{order_id}:{status_code}"
            )]
        )
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_order_detail:{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)



