from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.utils.common_utils import format_price, format_product_name


def show_categories_keyboard(categories: list[str]) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.

    :param categories: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    """
    keyboard = [
        [InlineKeyboardButton(text=cat, callback_data=f"category_{cat}")]
        for cat in categories
    ]
    keyboard.append([InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def show_product_info_kb(product_id: int, source: str, category_name: str = None, page: int = None) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.

    :param product_id: ID —Ç–æ–≤–∞—Ä–∞.
    :param source: –ò—Å—Ç–æ—á–Ω–∏–∫, –æ—Ç–∫—É–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ('catalog' –∏–ª–∏ 'cart').
    :param category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.
    :return: InlineKeyboardMarkup.
    """
    if source == "catalog":
        back_callback = f"category_{category_name}_{page}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"addtocart_{product_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
        )

    else:
        back_callback = "menu_cart"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"removefromcart_{product_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)],
            ]
        )

    return kb


def products_keyboard(products: list[dict], category: str, page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (–ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π).

    :param products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :param category: –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç 0)
    :param total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :return: InlineKeyboardMarkup —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"category_{category}_{page - 1}"
        ))

        nav_row.append(InlineKeyboardButton(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}", callback_data="noop"
        ))

    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"category_{category}_{page + 1}"
        ))

    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{format_product_name(product.name, 35)} ‚Äî {format_price(product.price)} ‚ÇΩ",
                callback_data=f"product_{product.id}_catalog_{category}_{page}"
            ),
            InlineKeyboardButton(
                text="üõí –í –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"addtocart_{product.id}"
            )
        ]
        for product in products
    ]

    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_catalog")
    ])

    keyboard.append([
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="menu_cart")
    ])

    keyboard.append([
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    ])

    if nav_row:
        keyboard.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)