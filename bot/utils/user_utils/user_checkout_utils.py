from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Bot

from bot.utils.common_utils import format_price
from config_data.env import ADMIN_IDS
from bot.keyboards.user.user_checkout_keyboards import payment_methods_keyboard
from bot.states.user_states.order_states import OrderStates
from bot.utils.user_utils.user_orders_utils import show_order_summary
from bot.utils.user_utils.validators import validate_name, format_name, validate_phone, validate_address
from bot.utils.user_utils.user_common_utils import validation_process_name, validation_process_address, validation_process_phone


async def editing_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    name = message.text
    if not validate_name(name):
        await validation_process_name(message, state)
        return
    name = format_name(name)
    await state.update_data(name=name)
    await show_order_summary(message, state)


async def editing_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    phone = message.text
    if not validate_phone(phone):
        await validation_process_phone(message, state)
        return
    await state.update_data(phone=phone)
    await show_order_summary(message, state)


async def editing_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    address = message.text
    if not validate_address(address):
        await validation_process_address(message, state)
        return
    await state.update_data(address=address)
    await show_order_summary(message, state)


async def editing_comment(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    comment = message.text
    await state.update_data(comment=comment)
    await show_order_summary(message, state)


async def editing_delivery(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    method = {
        "delivery_courier": "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º",
        "delivery_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑"
    }[callback.data]

    await state.update_data(delivery_method=method)

    if method == "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderStates.editing_address)
        await callback.answer()
        return

    await callback.message.delete()
    await show_order_summary(callback, state)
    await callback.answer()


async def editing_payment(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç summary.
    """
    method = {
        "pay_card": "–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω",
        "pay_cash": "–ù–∞–ª–∏—á–Ω—ã–µ",
        "pay_yoomoney": "–ÆMoney"
    }[callback.data]

    if method in ("–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω", "–ÆMoney"):
        try:
            await callback.message.edit_text(
                text="‚ùóÔ∏è –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è. –ü–æ–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
                reply_markup=payment_methods_keyboard()
            )
        except Exception as e:
            pass
        await callback.answer()
        return
    await state.update_data(payment_method=method)
    await callback.message.delete()
    await show_order_summary(callback, state)


async def notify_admin_about_new_order(bot: Bot, order):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    text = (
        "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n"
        f"–ò–º—è: {order.name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"–°—É–º–º–∞: {format_price(order.total_price)} ‚ÇΩ\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status}"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(chat_id=int(admin_id), text=text)
        except Exception as e:
            # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")



