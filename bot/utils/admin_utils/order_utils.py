from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot.keyboards.admin.order_keyboards import orders_list_keyboard, change_order_status
from bot.utils.common_utils import format_price
from database.crud import get_orders_page, get_order_items
from database.models import Order


def get_order_short_info(order) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
    """
    date = order.created_at.strftime("%d.%m %H:%M")
    return f"{date} | {order.status} | {format_price(order.total_price)} ‚ÇΩ"


async def show_orders(callback: CallbackQuery, page: int, text: str):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

    :param callback: CallbackQuery ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è Telegram.
    :param page: int ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç 1).
    :param text: str ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: None
    """
    orders, has_next, has_prev = await get_orders_page(page)
    orders_for_kb = [
        (order.id, get_order_short_info(order)) for order in orders
    ]
    if not orders:
        await callback.answer("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", show_alert=True)
        return
    await callback.message.edit_text(
        text,
        reply_markup=orders_list_keyboard(orders_for_kb, page, has_next, has_prev)
    )


async def admin_show_order_summary(event, state: FSMContext, order: Order, order_id: int):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞,
    –≤–∫–ª—é—á–∞—è –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
    :param event: CallbackQuery –∏–ª–∏ Message ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è Telegram.
    :param state: FSMContext
    :param order: Order ‚Äî –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞.
    :param order_id: int ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.
    :return: None
    """
    await order.fetch_related('user')
    order_items = await get_order_items(order)
    order_info = (
        f"–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞: {order.name}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone}\n"
        f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°–æ—Å—Ç–∞–≤:\n\n"
    )
    for item in order_items:
        price = item.price_at_order * item.quantity
        order_info += f"‚Äî <i>{item.product.name}</i> √ó {item.quantity} = {format_price(price)} ‚ÇΩ\n"

    order_info += (
        f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(order.total_price)} ‚ÇΩ\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_method}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}"
    )

    text = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"{order_info}"
    )

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (edit_text –¥–ª—è callback, answer –¥–ª—è message)
    if hasattr(event, "message"):  # CallbackQuery
        await event.message.edit_text(
            text=text,
            reply_markup=change_order_status()
        )
    else:  # Message
        msg = await event.answer(
            text=text,
            reply_markup=change_order_status()
        )
        await state.update_data(main_message_id=msg.message_id)
